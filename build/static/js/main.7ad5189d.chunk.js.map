{"version":3,"sources":["components/Form/form.module.scss","components/List/list.module.scss","components/ListItem/listItem.module.scss","components/Filter/filter.module.scss","components/Form/Form.js","components/ListItem/ListItem.js","components/List/List.js","components/Filter/Filter.js","App/App.js","index.js"],"names":["module","exports","Form","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","saveForm","this","className","s","form","label","type","pattern","title","required","autoComplete","onChange","input","btn","onClick","Component","defaultProps","ListItem","deleteItem","id","deleteContact","filtredContacts","length","changeCheckbox","classNameBtn","checboxForEdit","map","contact","style","indexOf","backgroundColor","item","contactSpan","List","edit","handleCheckbox","checked","status","classNameCheckbox","contactsList","hidden","list","Filter","filter","App","contacts","handleFilterChange","onSubmit","find","toLowerCase","alert","test","saveContact","newContact","uuid","prevState","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qIACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,MAAQ,oBAAoB,IAAM,oB,gBCA1GD,EAAOC,QAAU,CAAC,aAAe,2BAA2B,KAAO,mBAAmB,OAAS,qBAAqB,aAAe,6B,iBCAnID,EAAOC,QAAU,CAAC,KAAO,uBAAuB,WAAa,6BAA6B,YAAc,8BAA8B,kBAAkB,oC,gBCAxJD,EAAOC,QAAU,CAAC,MAAQ,wB,+MCGLC,E,4MACjBC,MAAQ,CACJC,KAAM,GACNC,OAAQ,I,EAGZC,aAAe,SAACC,GACZ,MAAwBA,EAAEC,OAAlBJ,EAAR,EAAQA,KAAMK,EAAd,EAAcA,MACd,EAAKC,SAAL,eAAiBN,EAAOK,K,EAG5BE,aAAe,SAACJ,GACZA,EAAEK,iBACF,MAAuB,EAAKT,MAArBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OACb,EAAKQ,MAAMC,SAASV,EAAMC,GAC1B,EAAKK,SAAS,CAAEN,KAAM,GAAIC,OAAQ,M,4CAGtC,WACI,MAAuBU,KAAKZ,MAArBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OACb,OACI,uBAAMW,UAAWC,IAAEC,KAAnB,UACI,wBAAOF,UAAWC,IAAEE,MAApB,kBACA,uBACEC,KAAK,OACLhB,KAAK,OACLiB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,aAAa,MACbC,SAAYV,KAAKT,aACjBG,MAAOL,EACPY,UAAWC,IAAES,WAGf,uBACA,wBAAOV,UAAWC,IAAEE,MAApB,oBACA,uBACEC,KAAK,MACLhB,KAAK,SACLiB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,aAAa,MACbC,SAAYV,KAAKT,aACjBG,MAAOJ,EACPW,UAAWC,IAAES,WAGf,uBACA,wBACIN,KAAK,SACLJ,UAAWC,IAAEU,IACbC,QAAWb,KAAKJ,aAHpB,gC,GAlDkBkB,aA8DlC3B,EAAK4B,aAAe,CAChBxB,aAAc,aACdK,aAAc,c,oBChEGoB,E,4MAEjBC,WAAa,SAACC,GACV,EAAKpB,MAAMqB,cAAcD,GACrB,EAAKpB,MAAMsB,gBAAgBC,OAAS,GACpC,EAAKvB,MAAMwB,gBAAe,I,4CAKlC,WAAU,IAAD,OACDC,EAAe,aAKnB,OAJKvB,KAAKF,MAAM0B,iBAChBD,GAAgB,WAIZ,mCACCvB,KAAKF,MAAMsB,gBAAgBK,KAAI,SAACC,GAAD,OAC5B,qBAEIC,MAAO,EAAK7B,MAAMsB,gBAAgBQ,QAAQF,GAAW,IAAM,EACrD,CAAEG,gBAAiB,eACnB,CAAEA,gBAAiB,SACzB5B,UAAWC,IAAE4B,KALjB,UAMI,sBAAK7B,UAAWC,IAAE6B,YAAlB,UACA,iCAAOL,EAAQrC,KAAf,OACA,iCAAOqC,EAAQpC,OAAf,UAEA,wBACIe,KAAK,SACLJ,UAAWsB,EACXV,QAAS,kBAAM,EAAKI,WAAWS,EAAQR,KAH3C,sBATKQ,EAAQR,a,GApBKJ,aAwCtCE,EAASD,aAAe,CAGpBO,eAAgB,c,oBC1CCU,E,4MACjB5C,MAAQ,CACJ6C,MAAM,G,EAGVC,eAAiB,SAAC1C,GACd,EAAKG,SAAS,CAAEsC,KAAMzC,EAAEC,OAAO0C,W,EAGnCb,eAAiB,SAACc,GACd,EAAKzC,SAAS,CAAEsC,KAAMG,K,4CAG1B,WACI,IAAOH,EAAQjC,KAAKZ,MAAb6C,KACHI,EAAoB,eACpBJ,IACJI,GAAqB,uBAErB,MAAyCrC,KAAKF,MAAvCsB,EAAP,EAAOA,gBAAiBD,EAAxB,EAAwBA,cAExB,OACI,sBAAKlB,UAAWC,IAAEoC,aAAlB,UACKlB,EAAgBC,OAAS,EACnB,wBACCpB,UAAWoC,EADZ,iBAGC,uBACAhC,KAAK,WACDJ,UAAWC,IAAEqC,OACbJ,QAASF,EACTvB,SAAUV,KAAKkC,oBAGrB,KAEN,oBAAIjC,UAAWC,IAAEsC,KAAjB,SACI,cAAC,EAAD,CACIpB,gBAAiBA,EACjBE,eAAgBtB,KAAKsB,eACrBE,eAAgBS,EAChBd,cAAeA,a,GAzCLL,aAiDlCkB,EAAKjB,aAAe,CAChBK,gBAAiB,GACjBD,cAAe,c,6BCpDEsB,E,4JAEjB,WACI,MAA+BzC,KAAKF,MAA7BP,EAAP,EAAOA,aAAcmD,EAArB,EAAqBA,OAErB,OACI,wBAAOzC,UAAWC,IAAEE,MAApB,kCAEA,uBACIC,KAAK,OACLhB,KAAK,SACLY,UAAWC,IAAES,MACbL,QAAQ,yHACRC,MAAM,kcACNE,aAAa,MACbC,SAAYnB,EACZG,MAASgD,W,GAhBW5B,aAwBpC2B,EAAO1B,aAAe,CAClB2B,OAAQ,GACRnD,aAAc,c,ICrBZoD,E,4MAEJvD,MAAQ,CACNwD,SAAU,CACR,CAAE1B,GAAI,OAAQ7B,KAAM,gBAAiBC,OAAQ,aAC7C,CAAE4B,GAAI,OAAQ7B,KAAM,iBAAkBC,OAAQ,aAC9C,CAAE4B,GAAI,OAAQ7B,KAAM,gBAAiBC,OAAQ,aAC7C,CAAE4B,GAAI,OAAQ7B,KAAM,iBAAkBC,OAAQ,cAEhDoD,OAAQ,I,EAGVG,mBAAqB,SAACrD,GACpB,EAAKG,SAAS,CAAE+C,OAAQlD,EAAEC,OAAOC,S,EAKnCoD,SAAW,SAACzD,EAAMC,GAKZ,EAAKF,MAAMwD,SAASG,MAAK,SAAArB,GAAO,OAAIA,EAAQrC,KAAK2D,gBAAkB3D,EAAK2D,iBAC1EC,MAAM,GAAD,OAAI5D,EAAJ,4BAEQ,KAATA,GAA0B,KAAXC,EACjB2D,MAAM,gDANM,yHAQCC,KAAK7D,GATJ,6EAYG6D,KAAK5D,GAGlB,EAAK6D,YAAY,CAAE9D,OAAMC,WAFzB2D,MAAM,iiBAHRA,MAAM,oc,EAYdE,YAAc,SAACC,GACb,IAAO/D,EAAgB+D,EAAhB/D,KAAMC,EAAU8D,EAAV9D,OACPoC,EAAU,CACdR,GAAImC,cACJhE,OACAC,UAEF,EAAKK,UAAS,gBAAGiD,EAAH,EAAGA,SAAH,MAAmB,CAC/BA,SAAS,CAAElB,GAAH,mBAAekB,S,EAI3BzB,cAAgB,SAAAD,GACd,EAAKvB,UAAS,SAAA2D,GAAS,MAAK,CAC1BV,SAAUU,EAAUV,SAASF,QAAO,SAAAhB,GAAO,OAAIA,EAAQR,KAAOA,U,4CAIlE,WAAU,IAAD,OAEDE,EACJpB,KAAKZ,MAAMwD,SAASF,QAClB,SAAAhB,GAAO,OAAIA,EAAQrC,KAAK2D,cAAcO,SACpC,EAAKnE,MAAMsD,OAAOM,kBAExB,OACE,sBAAK/C,UAAU,MAAf,UACE,2CACA,cAAC,EAAD,CACEF,SAAUC,KAAK8C,WAGhB9C,KAAKZ,MAAMwD,SAASvB,OAAS,EACzB,qCACD,0CACA,cAAC,EAAD,CACI9B,aAAcS,KAAK6C,mBACnBH,OAAQ1C,KAAKZ,MAAMsD,YAEtB,0DAEL,cAAC,EAAD,CACEtB,gBAAiBA,EACjBD,cAAenB,KAAKmB,uB,GArFZL,aA4FH6B,IC/Ffa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7ad5189d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"form_form__oKlKm\",\"label\":\"form_label__14Gtg\",\"input\":\"form_input__1ucsV\",\"btn\":\"form_btn__20OJ1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"list_contactsList__3BTPw\",\"list\":\"list_list__2XsKn\",\"hidden\":\"list_hidden__1L9AM\",\"checkboxEdit\":\"list_checkboxEdit__34l5i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"listItem_item__2JuYC\",\"btn_delete\":\"listItem_btn_delete__2Xwpv\",\"contactSpan\":\"listItem_contactSpan__2GjW_\",\"hidden-visually\":\"listItem_hidden-visually__2xXfq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"filter_input__2WOpW\"};","import React, { Component } from \"react\"\nimport s from './form.module.scss'\nimport PropTypes from 'prop-types'\n\nexport default class Form extends Component {\n    state = {\n        name: '',\n        number: ''\n    }\n    \n    handleChange = (e) => {\n        const { name, value } = e.target\n        this.setState({ [name]: value })\n    }\n    \n    handleSubmit = (e) => {\n        e.preventDefault()\n        const {name, number} = this.state\n        this.props.saveForm(name, number)\n        this.setState({ name: '', number: ''})\n        }\n\n    render() {\n        const {name, number} = this.state\n        return (\n            <form className={s.form}>\n                <label className={s.label}> Name\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                  title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                  required\n                  autoComplete=\"off\"\n                  onChange = {this.handleChange}\n                  value={name}\n                  className={s.input}\n                />\n                </label>\n                <br/>\n                <label className={s.label}> Number\n                <input\n                  type=\"tel\"\n                  name=\"number\"\n                  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                  title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                  required\n                  autoComplete=\"off\"\n                  onChange = {this.handleChange}\n                  value={number}\n                  className={s.input}\n                />\n                </label>\n                <br/>\n                <button\n                    type=\"submit\"\n                    className={s.btn}\n                    onClick = {this.handleSubmit}>\n                    Add contact\n                </button>\n                \n            </form>\n        )\n    }\n}\n\nForm.defaultProps = {\n    handleChange: () => { },\n    handleSubmit: () => { }\n}\n\nForm.propTypes = {\n    handleChange: PropTypes.func,\n    handleSubmit: PropTypes.func,\n}","import React, { Component } from \"react\";\nimport s from './listItem.module.scss'\nimport PropTypes from 'prop-types'\n\nexport default class ListItem extends Component {\n    \n    deleteItem = (id) => {\n        this.props.deleteContact(id)\n        if (this.props.filtredContacts.length < 2) {\n            this.props.changeCheckbox(false)\n        }\n    }\n\n    \n    render() {\n        let classNameBtn = 'btn_delete'\n        if (!this.props.checboxForEdit) {\n        classNameBtn += ' hidden'\n        }\n        \n        return (\n            <>\n            {this.props.filtredContacts.map((contact) => (\n                <li\n                    key={contact.id}\n                    style={this.props.filtredContacts.indexOf(contact) % 2 !== 0\n                        ? { backgroundColor: 'transparent' }\n                        : { backgroundColor: 'white' }}\n                    className={s.item}>\n                    <div className={s.contactSpan}>\n                    <span>{contact.name} </span>\n                    <span>{contact.number} </span>\n                    </div>\n                    <button\n                        type=\"button\"\n                        className={classNameBtn}\n                        onClick={() => this.deleteItem(contact.id)}>\n                        Delete\n                    </button>\n                </li> )) }\n            </>)\n    }   \n}\n    \nListItem.defaultProps = {\n    // filtredContacts: {},\n    // deleteContact: () => { },\n    changeCheckbox: () => { },\n}\n\nListItem.propTypes = {\n    changeCheckbox: PropTypes.func,\n    // deleteContact: PropTypes.func,\n    // filtredContacts: PropTypes.arrayOf(\n    //     PropTypes.shape({\n    //         id: PropTypes.string,\n    //         name: PropTypes.string,\n    //         number: PropTypes.string\n    //     }))\n    }","import React, {Component} from \"react\"\nimport ListItem from \"../ListItem/ListItem\"\nimport s from './list.module.scss'\nimport PropTypes from 'prop-types'\n\nexport default class List extends Component {\n    state = {\n        edit: false\n    }\n\n    handleCheckbox = (e) => {\n        this.setState({ edit: e.target.checked })\n    }\n\n    changeCheckbox = (status) => {\n        this.setState({ edit: status })\n    }\n\n    render() {\n        const {edit} = this.state\n        let classNameCheckbox = 'checkboxEdit'\n        if (edit) {\n        classNameCheckbox += ' checkboxEditActive'\n        }\n        const {filtredContacts, deleteContact} = this.props\n\n        return (\n            <div className={s.contactsList}>\n                {filtredContacts.length > 0\n                    ? (<label\n                        className={classNameCheckbox}>\n                        Edit\n                        <input\n                        type=\"checkbox\"\n                            className={s.hidden}\n                            checked={edit}\n                            onChange={this.handleCheckbox}\n                        />\n                        </label>)\n                    : null\n                }    \n                <ul className={s.list}>\n                    <ListItem\n                        filtredContacts={filtredContacts}\n                        changeCheckbox={this.changeCheckbox}\n                        checboxForEdit={edit}\n                        deleteContact={deleteContact}\n                    />\n                </ul>\n            </div>\n        )\n    }\n}\n\nList.defaultProps = {\n    filtredContacts: {},\n    deleteContact: () => { },\n}\n\nList.propTypes = {\n    deleteContact: PropTypes.func,\n    filtredContacts: PropTypes.array\n    }","import React, { Component } from \"react\";\nimport s from './filter.module.scss'\nimport PropTypes from 'prop-types'\n\nexport default class Filter extends Component {\n\n    render() {\n        const {handleChange, filter} = this.props\n\n        return (\n            <label className={s.label}>\n                Find contacts by name \n            <input\n                type=\"text\"\n                name=\"filter\"\n                className={s.input}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                autoComplete=\"off\"\n                onChange = {handleChange}\n                value = {filter}>\n            </input>\n            </label>\n        )\n    }\n    \n}\n\nFilter.defaultProps = {\n    filter: '',\n    handleChange: () => {}\n}\n\nFilter.propTypes = {\n    handleChange: PropTypes.func,\n    filter: PropTypes.string,\n}","// import logo from './logo.svg';\nimport React from 'react';\nimport { Component } from 'react';\nimport './App.css';\nimport Form from '../components/Form'\nimport List from '../components/List'\nimport { v4 as uuid } from 'uuid';\nimport Filter from '../components/Filter';\n\nclass App extends Component {\n\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: ''\n  }\n\n  handleFilterChange = (e) => {\n    this.setState({ filter: e.target.value })\n  }\n\n  // regNumber = /+?/d{1,4}?[-./s]?/(?/d{1,3}?/)?[-./s]?/d{1,4}[-./s]?/d{1,4}[-./s]?/d{1,9}\n\n  onSubmit = (name, number) => {\n    \n    const regNumber = /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/\n    const regName = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/\n\n    if (this.state.contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      alert(`${name} is already in contacts`)\n    } else {\n      if (name === '' || number === '') {\n        alert(\"Do not save contact without a name or number\")\n      } else {\n        if (!regName.test(name)) {\n          alert(\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\")\n        } else {\n          if (!regNumber.test(number)) {\n            alert(\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\")\n          } else {\n            this.saveContact({ name, number })\n          }\n        }\n      }\n    }\n  }\n\n  saveContact = (newContact) => {\n    const {name, number} = newContact\n    const contact = {\n      id: uuid(),\n      name,\n      number\n    }\n    this.setState(({ contacts }) => ({\n      contacts: [contact, ...contacts],\n    }));\n  };\n\n  deleteContact = id => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== id)\n    }))\n  }\n\n  render() {\n\n    const filtredContacts =\n      this.state.contacts.filter(\n        contact => contact.name.toLowerCase().includes(\n          this.state.filter.toLowerCase()))\n\n    return (\n      <div className=\"app\">\n        <h1>Phonebook</h1>\n        <Form\n          saveForm={this.onSubmit}\n          />\n        \n        {this.state.contacts.length > 0 \n          ? (<>\n            <h2>Contacts</h2>\n            <Filter\n                handleChange={this.handleFilterChange}\n                filter={this.state.filter} />\n            </>)\n          : (<p>no contacts at the moment</p>)\n        }\n        <List\n          filtredContacts={filtredContacts}\n          deleteContact={this.deleteContact}\n          />\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}